# Trinitas v3.5 MCP Tools - Production Docker Compose
#
# üå∏ Springfield: "„Åµ„Åµ„ÄÅ„Ç≥„É≥„ÉÜ„ÉäÂåñ„Åï„Çå„Åü„Ç´„Éï„Çß„ÅÆ„Çà„ÅÜ„Å´„ÄÅ„Åô„Åπ„Å¶„ÅåÊï¥ÁÑ∂„Å®ÈÖçÁΩÆ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ"
# ‚ö° Krukai: "ÂÆåÁíß„Å™„Éû„Ç§„ÇØ„É≠„Çµ„Éº„Éì„Çπ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Åß„ÄÅ„Çπ„Ç±„Éº„É©„Éñ„É´„Å™Êú¨Áï™Áí∞Â¢É„ÇíÊßãÁØâÔºÅ"
# üõ°Ô∏è Vector: "‚Ä¶‚Ä¶„Ç≥„É≥„ÉÜ„Éä„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Å®„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂàÜÈõ¢„ÇíÁ¢∫‰øù‚Ä¶‚Ä¶"

version: '3.8'

services:
  # Main Trinitas Application
  trinitas-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: trinitas-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://trinitas:${DB_PASSWORD}@postgres:5432/trinitas
      - CACHE_DIR=/var/cache/trinitas
      - METRICS_DB_PATH=/var/lib/trinitas/metrics.db
    volumes:
      - app_data:/var/lib/trinitas
      - cache_data:/var/cache/trinitas
      - logs:/var/log/trinitas
      - ./config/production.env:/etc/trinitas/environment:ro
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - postgres
      - monitoring
    networks:
      - trinitas-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "python", "/app/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.trinitas.rule=Host(`trinitas.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.trinitas.tls=true"
      - "traefik.http.routers.trinitas.tls.certresolver=letsencrypt"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trinitas-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - trinitas-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trinitas-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=trinitas
      - POSTGRES_USER=trinitas
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - trinitas-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trinitas -d trinitas"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Monitoring Stack
  monitoring:
    image: prom/prometheus:latest
    container_name: trinitas-monitoring
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - trinitas-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: trinitas-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./config/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - monitoring
    networks:
      - trinitas-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: trinitas-nginx
    restart: unless-stopped
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - trinitas-app
    networks:
      - trinitas-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Log Aggregation
  fluentd:
    image: fluent/fluentd:edge-debian
    container_name: trinitas-fluentd
    restart: unless-stopped
    volumes:
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - logs:/var/log/trinitas
    ports:
      - "127.0.0.1:24224:24224"
    networks:
      - trinitas-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Load Testing (for performance validation)
  locust:
    image: locustio/locust
    container_name: trinitas-loadtest
    restart: "no"
    profiles:
      - testing
    volumes:
      - ./load_test.py:/mnt/locust/locustfile.py:ro
    ports:
      - "127.0.0.1:8089:8089"
    environment:
      - LOCUST_HOST=http://trinitas-app:8000
    networks:
      - trinitas-network
    depends_on:
      - trinitas-app

  # Backup Service
  backup:
    image: alpine:latest
    container_name: trinitas-backup
    restart: "no"
    profiles:
      - backup
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
    volumes:
      - postgres_data:/backup/postgres:ro
      - redis_data:/backup/redis:ro
      - app_data:/backup/app:ro
      - ./scripts/backup.sh:/backup.sh:ro
    command: /backup.sh
    networks:
      - trinitas-network

# Persistent Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/trinitas/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/trinitas/redis
  
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/trinitas/app
  
  cache_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/cache/trinitas
  
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/trinitas
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local

# Networks
networks:
  trinitas-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Secrets (use Docker Swarm secrets in production)
secrets:
  db_password:
    external: true
  redis_password:
    external: true
  grafana_password:
    external: true