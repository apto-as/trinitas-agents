[project]
name = "trinitas-mcp-tools"
version = "3.5.0"
description = "Trinitas v3.5 MCP Tools - Five-mind integrated intelligence for Claude Code"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Trinitas Core", email = "trinitas@olympus.ai"}
]
keywords = ["mcp", "claude", "ai", "trinitas", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastmcp>=0.1.0",
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
]
redis = [
    "redis>=4.5.0",
    "psutil>=5.9.0",
]
memory = [
    "chromadb>=0.4.0",
    "sqlalchemy>=2.0.0",
]
ai = [
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
]
all = [
    "trinitas-mcp-tools[dev]",
    "trinitas-mcp-tools[redis]",
    "trinitas-mcp-tools[memory]",
    "trinitas-mcp-tools[ai]",
]

[project.scripts]
trinitas-mcp = "src.cli:main"
trinitas-server = "src.mcp_server_fastmcp:main"
trinitas-setup = "src.setup:setup_claude"

[project.urls]
Homepage = "https://github.com/apto-as/trinitas-agents"
Documentation = "https://github.com/apto-as/trinitas-agents/tree/main/v35-mcp-tools/docs"
Repository = "https://github.com/apto-as/trinitas-agents.git"
Issues = "https://github.com/apto-as/trinitas-agents/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
    "src/**/*.py",
    "config/**/*.yaml",
    "config/**/*.json",
]
exclude = [
    "tests/",
    "examples/",
    "docs/",
    "scripts/",
    "venv/",
    "*.pyc",
    "__pycache__/",
]

[tool.uv]
dev-dependencies = [
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
]

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
pythonpath = ["."]

[tool.black]
line-length = 100
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''