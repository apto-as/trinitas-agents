#!/usr/bin/env python3
"""
Trinitas v3.5 MCP Tools - Practical Usage Examples
Real-world examples for Claude Code integration
"""

import asyncio
import json
from typing import Dict, List, Optional, Any
from datetime import datetime

# These would be imported from the actual MCP tools in Claude Code
# For demonstration purposes, we'll simulate the tool calls

class TrinitasExamples:
    """
    Comprehensive examples of how to use Trinitas v3.5 MCP Tools with Claude Code
    """
    
    def __init__(self):
        """Initialize examples"""
        self.examples = {
            "basic": [
                "simple_persona_execution",
                "quality_check_example", 
                "security_audit_example"
            ],
            "intermediate": [
                "multi_persona_collaboration",
                "context_management_example",
                "workflow_execution_example"
            ],
            "advanced": [
                "full_development_lifecycle",
                "incident_response_simulation",
                "performance_optimization_workflow"
            ],
            "real_world": [
                "microservice_development",
                "security_hardening_project",
                "legacy_system_migration"
            ]
        }
    
    async def run_example(self, example_name: str) -> Dict[str, Any]:
        """Run a specific example"""
        method_name = f"example_{example_name}"
        if hasattr(self, method_name):
            method = getattr(self, method_name)
            return await method()
        else:
            return {"error": f"Example '{example_name}' not found"}
    
    async def example_simple_persona_execution(self) -> Dict[str, Any]:
        """\n        Example: Simple persona execution for code review\n        \n        This example shows how Claude Code can use a single persona\n        to perform a specific task.\n        \"\"\"\n        \n        print(\"\\n=== Example: Simple Persona Execution ===\")\n        print(\"Task: Have Springfield review a system architecture\")\n        \n        # Simulate MCP tool call: persona_execute\n        example_response = {\n            \"success\": True,\n            \"data\": \"ふふ、とても興味深いアーキテクチャですね。マイクロサービスの設計は適切で、スケーラビリティも考慮されています。ただし、サービス間通信のエラーハンドリングをもう少し強化されることをお勧めいたします。\",\n            \"persona\": \"springfield\",\n            \"timestamp\": datetime.now().isoformat()\n        }\n        \n        print(f\"Springfield's Response: {example_response['data']}\")\n        \n        return {\n            \"example\": \"simple_persona_execution\",\n            \"description\": \"Single persona task execution\",\n            \"use_case\": \"Quick expert consultation\",\n            \"result\": example_response\n        }\n    \n    async def example_quality_check_example(self) -> Dict[str, Any]:\n        \"\"\"\n        Example: Code quality check using Trinity validation\n        \n        This shows how Claude Code can automatically check code quality\n        using multiple persona perspectives.\n        \"\"\"\n        \n        print(\"\\n=== Example: Trinity Quality Check ===\")\n        \n        code_sample = \"\"\"\ndef process_payment(amount, card_number, cvv):\n    if not validate_card(card_number):\n        raise ValueError(\"Invalid card\")\n    \n    if amount <= 0:\n        raise ValueError(\"Invalid amount\")\n    \n    return charge_card(card_number, cvv, amount)\n\"\"\"\n        \n        print(f\"Code to review:\\n{code_sample}\")\n        \n        # Simulate MCP tool call: quality_check\n        example_response = {\n            \"success\": True,\n            \"data\": {\n                \"overall_score\": 0.85,\n                \"trinity_checks\": [\n                    {\n                        \"persona\": \"Springfield\",\n                        \"aspect\": \"Strategic Coherence\",\n                        \"score\": 0.9,\n                        \"feedback\": \"支払い処理の設計は適切ですが、エラー処理の統一性を改善できます。\"\n                    },\n                    {\n                        \"persona\": \"Krukai\",\n                        \"aspect\": \"Code Quality\",\n                        \"score\": 0.8,\n                        \"feedback\": \"まあ悪くないけど、入力検証をもっと厳密にすべきね。404の基準なら85点。\"\n                    },\n                    {\n                        \"persona\": \"Vector\",\n                        \"aspect\": \"Security\",\n                        \"score\": 0.85,\n                        \"feedback\": \"……CVVを平文で扱っているのは危険……暗号化が必要……\"\n                    }\n                ],\n                \"recommendation\": \"APPROVED\",\n                \"check_level\": \"comprehensive\"\n            }\n        }\n        \n        print(f\"Quality Score: {example_response['data']['overall_score']}\")\n        print(f\"Recommendation: {example_response['data']['recommendation']}\")\n        \n        for check in example_response['data']['trinity_checks']:\n            print(f\"- {check['persona']}: {check['score']} - {check['feedback']}\")\n        \n        return {\n            \"example\": \"quality_check_example\",\n            \"description\": \"Trinity quality validation\",\n            \"use_case\": \"Automated code review\",\n            \"result\": example_response\n        }\n    \n    async def example_security_audit_example(self) -> Dict[str, Any]:\n        \"\"\"\n        Example: Security audit with Vector's paranoid analysis\n        \n        Shows how Claude Code can perform deep security analysis\n        using Vector's expertise.\n        \"\"\"\n        \n        print(\"\\n=== Example: Vector Security Audit ===\")\n        \n        vulnerable_code = \"\"\"\ndef user_login(username, password):\n    query = f\"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'\"\n    result = db.execute(query)\n    return result.fetchone() is not None\n\"\"\"\n        \n        print(f\"Code to audit:\\n{vulnerable_code}\")\n        \n        # Simulate MCP tool call: security_audit\n        example_response = {\n            \"success\": True,\n            \"data\": {\n                \"security_score\": 0.2,\n                \"vulnerabilities\": [\n                    {\n                        \"type\": \"SQL Injection\",\n                        \"severity\": \"Critical\",\n                        \"line\": 2,\n                        \"description\": \"Direct string interpolation in SQL query\"\n                    },\n                    {\n                        \"type\": \"Plain Text Passwords\",\n                        \"severity\": \"High\",\n                        \"line\": 2,\n                        \"description\": \"Password comparison without hashing\"\n                    }\n                ],\n                \"warnings\": [\n                    \"No input sanitization\",\n                    \"No rate limiting implemented\",\n                    \"Database errors may leak information\"\n                ],\n                \"recommendations\": [\n                    \"Use parameterized queries\",\n                    \"Implement password hashing (bcrypt/scrypt)\",\n                    \"Add input validation and sanitization\",\n                    \"Implement rate limiting for login attempts\",\n                    \"Use prepared statements\"\n                ],\n                \"audit_level\": \"paranoid\",\n                \"vector_assessment\": \"……これは非常に危険……SQLインジェクションで全データが漏洩する……すぐに修正が必要……\"\n            }\n        }\n        \n        print(f\"Security Score: {example_response['data']['security_score']}/1.0\")\n        print(f\"Vector's Assessment: {example_response['data']['vector_assessment']}\")\n        \n        print(\"\\nVulnerabilities Found:\")\n        for vuln in example_response['data']['vulnerabilities']:\n            print(f\"- {vuln['type']} ({vuln['severity']}) on line {vuln['line']}\")\n        \n        print(\"\\nRecommendations:\")\n        for rec in example_response['data']['recommendations']:\n            print(f\"- {rec}\")\n        \n        return {\n            \"example\": \"security_audit_example\",\n            \"description\": \"Paranoid security analysis\",\n            \"use_case\": \"Security vulnerability detection\",\n            \"result\": example_response\n        }\n    \n    async def example_multi_persona_collaboration(self) -> Dict[str, Any]:\n        \"\"\"\n        Example: Multi-persona collaboration for complex problem\n        \n        Shows how Claude Code can orchestrate multiple personas\n        to work together on a complex task.\n        \"\"\"\n        \n        print(\"\\n=== Example: Multi-Persona Collaboration ===\")\n        print(\"Task: Design and implement secure API gateway\")\n        \n        # Simulate MCP tool call: collaborate_personas\n        example_response = {\n            \"success\": True,\n            \"data\": {\n                \"mode\": \"sequential\",\n                \"results\": [\n                    {\n                        \"persona\": \"springfield\",\n                        \"result\": \"戦略的分析完了。APIゲートウェイの設計では、認証・認可、レート制限、ログ監視の三層構造をお勧めします。マイクロサービス間の通信も考慮した設計が必要ですね。\"\n                    },\n                    {\n                        \"persona\": \"krukai\",\n                        \"result\": \"フン、まあ基本的な設計は悪くないわ。でも性能面では、接続プーリング、キャッシュ戦略、非同期処理の実装が必要ね。404の基準で最適化してあげる。\"\n                    },\n                    {\n                        \"persona\": \"vector\",\n                        \"result\": \"……Springfieldの設計にセキュリティの観点を追加……OWASP API Security Top 10の全項目をチェック……特にJWT検証、入力サニタイゼーション、CORS設定が重要……\"\n                    }\n                ],\n                \"final_output\": \"三位一体の分析により、高性能かつセキュアなAPIゲートウェイの実装方針が決定されました。\"\n            }\n        }\n        \n        print(\"Collaboration Results:\")\n        for result in example_response['data']['results']:\n            print(f\"\\n{result['persona'].title()}: {result['result']}\")\n        \n        return {\n            \"example\": \"multi_persona_collaboration\",\n            \"description\": \"Sequential collaboration between three personas\",\n            \"use_case\": \"Complex architectural decisions\",\n            \"result\": example_response\n        }\n    \n    async def example_context_management_example(self) -> Dict[str, Any]:\n        \"\"\"\n        Example: Advanced context management across sessions\n        \n        Shows how Claude Code can maintain context across\n        multiple interactions and sessions.\n        \"\"\"\n        \n        print(\"\\n=== Example: Context Management ===\")\n        print(\"Scenario: Multi-session project development\")\n        \n        # Step 1: Set project context\n        print(\"\\n1. Setting project context...\")\n        # Simulate: set_trinitas_context\n        project_context = {\n            \"project_name\": \"E-commerce API\",\n            \"tech_stack\": [\"Python\", \"FastAPI\", \"PostgreSQL\", \"Redis\"],\n            \"requirements\": {\n                \"authentication\": \"JWT with refresh tokens\",\n                \"payment\": \"Stripe integration\", \n                \"performance\": \"<200ms response time\",\n                \"security\": \"OWASP compliance\"\n            },\n            \"timeline\": \"2 weeks\"\n        }\n        \n        print(f\"Project context set: {project_context['project_name']}\")\n        \n        # Step 2: Work with Springfield on architecture\n        print(\"\\n2. Springfield architectural planning...\")\n        # Simulate: persona_execute with context\n        springfield_result = {\n            \"success\": True,\n            \"data\": \"プロジェクトコンテキストを確認しました。2週間でE-commerce APIを構築するには、段階的な開発アプローチが最適です。まず認証システム、次に商品管理、最後に決済システムの順序で進めましょう。\",\n            \"persona\": \"springfield\"\n        }\n        \n        # Step 3: Store architectural decisions\n        print(\"\\n3. Storing architectural decisions...\")\n        # Simulate: set_trinitas_context\n        architecture_decisions = {\n            \"development_phases\": [\n                \"Phase 1: Authentication system\",\n                \"Phase 2: Product management\", \n                \"Phase 3: Payment integration\"\n            ],\n            \"decided_by\": \"springfield\",\n            \"timestamp\": datetime.now().isoformat()\n        }\n        \n        # Step 4: Later session - retrieve context\n        print(\"\\n4. New session - retrieving project context...\")\n        # Simulate: get_trinitas_context and get_session_context\n        retrieved_context = {\n            \"found\": True,\n            \"value\": {\n                \"project_context\": project_context,\n                \"architecture_decisions\": architecture_decisions,\n                \"last_persona_used\": \"springfield\"\n            }\n        }\n        \n        print(\"Context successfully retrieved across sessions\")\n        print(f\"Current phase: {architecture_decisions['development_phases'][0]}\")\n        \n        return {\n            \"example\": \"context_management_example\",\n            \"description\": \"Cross-session context persistence\",\n            \"use_case\": \"Long-term project development\",\n            \"result\": {\n                \"context_set\": True,\n                \"context_retrieved\": True,\n                \"persistence_working\": True\n            }\n        }\n    \n    async def example_workflow_execution_example(self) -> Dict[str, Any]:\n        \"\"\"\n        Example: Workflow execution for rapid prototyping\n        \n        Shows how Claude Code can execute predefined workflows\n        for common development patterns.\n        \"\"\"\n        \n        print(\"\\n=== Example: Workflow Execution ===\")\n        print(\"Executing: Rapid Prototyping Workflow\")\n        \n        # Simulate: execute_trinitas_workflow\n        workflow_params = {\n            \"project_name\": \"Chat Application Prototype\",\n            \"requirements\": [\n                \"Real-time messaging\",\n                \"User authentication\",\n                \"Message history\",\n                \"Basic UI\"\n            ],\n            \"target_platform\": \"web\",\n            \"time_constraint\": \"4 hours\"\n        }\n        \n        print(f\"Workflow parameters: {json.dumps(workflow_params, indent=2)}\")\n        \n        example_response = {\n            \"workflow_id\": \"rapid_prototyping_20241221_143022\",\n            \"status\": \"completed\",\n            \"start_time\": \"2024-12-21T14:30:22\",\n            \"end_time\": \"2024-12-21T15:45:18\",\n            \"steps_completed\": [\n                \"concept_validation\",\n                \"quick_implementation\",\n                \"basic_testing\"\n            ],\n            \"steps_failed\": [],\n            \"results\": {\n                \"concept_validation\": {\n                    \"persona\": \"springfield\",\n                    \"result\": \"チャットアプリケーションのコンセプトは実現可能です。WebSocketを使用したリアルタイム通信と、JWTベースの認証システムを推奨します。\"\n                },\n                \"quick_implementation\": {\n                    \"personas\": [\"krukai\", \"littara\"],\n                    \"result\": \"実装完了。Socket.IO + Express.js + SQLiteで基本機能を実装。パフォーマンステストも通過。\"\n                },\n                \"basic_testing\": {\n                    \"persona\": \"vector\",\n                    \"result\": \"……基本的なセキュリティテスト完了……プロトタイプレベルでは問題なし……本格運用時は追加の対策が必要……\"\n                }\n            },\n            \"metadata\": {\n                \"total_duration\": \"1h 15m\",\n                \"personas_used\": 4\n            }\n        }\n        \n        print(f\"\\nWorkflow Status: {example_response['status']}\")\n        print(f\"Duration: {example_response['metadata']['total_duration']}\")\n        print(f\"Steps completed: {len(example_response['steps_completed'])}/3\")\n        \n        print(\"\\nStep Results:\")\n        for step, result in example_response['results'].items():\n            print(f\"\\n{step}:\")\n            print(f\"  {result['result']}\")\n        \n        return {\n            \"example\": \"workflow_execution_example\",\n            \"description\": \"Predefined workflow execution\",\n            \"use_case\": \"Rapid prototyping and validation\",\n            \"result\": example_response\n        }\n    \n    async def example_full_development_lifecycle(self) -> Dict[str, Any]:\n        \"\"\"\n        Example: Complete development lifecycle workflow\n        \n        Shows how Claude Code can manage an entire development\n        project from planning to deployment.\n        \"\"\"\n        \n        print(\"\\n=== Example: Full Development Lifecycle ===\")\n        print(\"Project: Secure File Sharing Service\")\n        \n        # This would be executed as: execute_trinitas_workflow\n        workflow_stages = {\n            \"project_initialization\": {\n                \"persona\": \"springfield\",\n                \"duration\": \"30 minutes\",\n                \"output\": \"プロジェクト要件とマイルストーンを定義しました。セキュアなファイル共有サービスの開発計画を策定。\"\n            },\n            \"requirements_analysis\": {\n                \"personas\": [\"springfield\", \"vector\"],\n                \"duration\": \"45 minutes\",\n                \"output\": \"機能要件とセキュリティ要件を詳細分析。GDPR準拠、エンドツーエンド暗号化、監査ログが必要。\"\n            },\n            \"architecture_design\": {\n                \"personas\": [\"springfield\", \"krukai\"],\n                \"duration\": \"60 minutes\",\n                \"output\": \"マイクロサービス アーキテクチャ設計完了。ファイルストレージ、暗号化、認証の3サービス構成。\"\n            },\n            \"security_planning\": {\n                \"persona\": \"vector\",\n                \"duration\": \"45 minutes\",\n                \"output\": \"……脅威モデル作成……ランサムウェア対策、データ漏洩防止、不正アクセス対策を実装……\"\n            },\n            \"implementation\": {\n                \"personas\": [\"krukai\", \"littara\"],\n                \"duration\": \"4 hours\",\n                \"output\": \"コア機能実装完了。暗号化モジュール、API、ユーザーインターフェース実装済み。\"\n            },\n            \"code_review\": {\n                \"personas\": [\"springfield\", \"krukai\", \"vector\"],\n                \"duration\": \"60 minutes\",\n                \"output\": \"Trinity review完了。コード品質85%、セキュリティスコア95%。本番環境へのデプロイ承認。\"\n            },\n            \"deployment_preparation\": {\n                \"personas\": [\"groza\", \"vector\"],\n                \"duration\": \"45 minutes\",\n                \"output\": \"Deployment pipeline設定完了。監視、ログ、バックアップシステム準備済み。\"\n            }\n        }\n        \n        total_duration = 7.5  # hours\n        print(f\"\\nTotal Project Duration: {total_duration} hours\")\n        print(f\"Stages Completed: {len(workflow_stages)}\")\n        \n        print(\"\\nStage Details:\")\n        for stage, details in workflow_stages.items():\n            print(f\"\\n{stage.replace('_', ' ').title()}:\")\n            print(f\"  Duration: {details['duration']}\")\n            print(f\"  Result: {details['output']}\")\n        \n        return {\n            \"example\": \"full_development_lifecycle\",\n            \"description\": \"Complete project lifecycle management\",\n            \"use_case\": \"Enterprise project development\",\n            \"result\": {\n                \"stages_completed\": len(workflow_stages),\n                \"total_duration_hours\": total_duration,\n                \"success_rate\": 1.0,\n                \"final_quality_score\": 0.85\n            }\n        }\n    \n    async def example_microservice_development(self) -> Dict[str, Any]:\n        \"\"\"\n        Example: Real-world microservice development\n        \n        Shows practical application for developing and deploying\n        a microservice with full Trinity support.\n        \"\"\"\n        \n        print(\"\\n=== Example: Microservice Development ===\")\n        print(\"Project: User Authentication Microservice\")\n        \n        # Phase 1: Service Design (Springfield)\n        design_phase = {\n            \"service_name\": \"auth-service\",\n            \"responsibilities\": [\n                \"User registration and login\",\n                \"JWT token management\",\n                \"Password reset functionality\",\n                \"OAuth provider integration\"\n            ],\n            \"api_endpoints\": [\n                \"POST /api/v1/auth/register\",\n                \"POST /api/v1/auth/login\",\n                \"POST /api/v1/auth/refresh\",\n                \"POST /api/v1/auth/logout\",\n                \"POST /api/v1/auth/reset-password\"\n            ],\n            \"dependencies\": [\n                \"PostgreSQL for user data\",\n                \"Redis for session management\",\n                \"SMTP service for emails\"\n            ]\n        }\n        \n        print(f\"Service Design: {design_phase['service_name']}\")\n        print(f\"API Endpoints: {len(design_phase['api_endpoints'])}\")\n        \n        # Phase 2: Implementation (Krukai + Littara)\n        implementation_result = {\n            \"language\": \"Python\",\n            \"framework\": \"FastAPI\",\n            \"database_orm\": \"SQLAlchemy\",\n            \"testing_framework\": \"pytest\",\n            \"performance_metrics\": {\n                \"response_time\": \"<150ms\",\n                \"throughput\": \"1000 req/sec\",\n                \"memory_usage\": \"<128MB\"\n            },\n            \"code_quality\": {\n                \"test_coverage\": \"95%\",\n                \"code_complexity\": \"Low\",\n                \"maintainability_index\": \"A\"\n            }\n        }\n        \n        print(f\"\\nImplementation Complete:\")\n        print(f\"  Framework: {implementation_result['framework']}\")\n        print(f\"  Performance: {implementation_result['performance_metrics']['response_time']}\")\n        print(f\"  Test Coverage: {implementation_result['code_quality']['test_coverage']}\")\n        \n        # Phase 3: Security Hardening (Vector)\n        security_measures = {\n            \"authentication\": [\n                \"bcrypt password hashing\",\n                \"JWT with short expiration\",\n                \"Refresh token rotation\"\n            ],\n            \"input_validation\": [\n                \"Pydantic models for all inputs\",\n                \"SQL injection prevention\",\n                \"XSS protection headers\"\n            ],\n            \"rate_limiting\": [\n                \"Login attempt limiting\",\n                \"API rate limiting\",\n                \"IP-based blocking\"\n            ],\n            \"monitoring\": [\n                \"Authentication event logging\",\n                \"Failed login alerts\",\n                \"Anomaly detection\"\n            ],\n            \"compliance\": [\"OWASP Top 10\", \"GDPR ready\", \"SOC2 compliant\"]\n        }\n        \n        print(f\"\\nSecurity Measures Implemented:\")\n        for category, measures in security_measures.items():\n            print(f\"  {category.title()}: {len(measures)} measures\")\n        \n        # Phase 4: Deployment (Groza)\n        deployment_config = {\n            \"containerization\": \"Docker + Docker Compose\",\n            \"orchestration\": \"Kubernetes\",\n            \"ci_cd\": \"GitHub Actions\",\n            \"monitoring\": \"Prometheus + Grafana\",\n            \"logging\": \"ELK Stack\",\n            \"environment_configs\": [\"dev\", \"staging\", \"production\"],\n            \"deployment_strategy\": \"Blue-Green with health checks\"\n        }\n        \n        print(f\"\\nDeployment Configuration:\")\n        print(f\"  Strategy: {deployment_config['deployment_strategy']}\")\n        print(f\"  Environments: {len(deployment_config['environment_configs'])}\")\n        \n        final_metrics = {\n            \"development_time\": \"3 days\",\n            \"lines_of_code\": 2500,\n            \"test_cases\": 85,\n            \"security_score\": 0.98,\n            \"performance_score\": 0.92,\n            \"maintainability_score\": 0.95\n        }\n        \n        print(f\"\\nFinal Metrics:\")\n        print(f\"  Development Time: {final_metrics['development_time']}\")\n        print(f\"  Security Score: {final_metrics['security_score']}\")\n        print(f\"  Performance Score: {final_metrics['performance_score']}\")\n        \n        return {\n            \"example\": \"microservice_development\",\n            \"description\": \"Complete microservice development lifecycle\",\n            \"use_case\": \"Production-ready service development\",\n            \"result\": {\n                \"service_name\": design_phase['service_name'],\n                \"implementation\": implementation_result,\n                \"security\": len([item for sublist in security_measures.values() for item in sublist]),\n                \"deployment\": deployment_config,\n                \"final_metrics\": final_metrics\n            }\n        }\n    \n    def list_all_examples(self) -> Dict[str, List[str]]:\n        \"\"\"List all available examples by category\"\"\"\n        return self.examples\n    \n    def get_example_description(self, example_name: str) -> str:\n        \"\"\"Get description for a specific example\"\"\"\n        descriptions = {\n            \"simple_persona_execution\": \"Basic single persona task execution\",\n            \"quality_check_example\": \"Trinity quality validation system\",\n            \"security_audit_example\": \"Vector's paranoid security analysis\",\n            \"multi_persona_collaboration\": \"Multiple persona collaboration patterns\",\n            \"context_management_example\": \"Advanced context management across sessions\",\n            \"workflow_execution_example\": \"Predefined workflow execution\",\n            \"full_development_lifecycle\": \"Complete project lifecycle management\",\n            \"incident_response_simulation\": \"Emergency incident response workflow\",\n            \"performance_optimization_workflow\": \"System performance optimization process\",\n            \"microservice_development\": \"Real-world microservice development\",\n            \"security_hardening_project\": \"Comprehensive security hardening\",\n            \"legacy_system_migration\": \"Legacy system modernization\"\n        }\n        return descriptions.get(example_name, \"No description available\")\n\nif __name__ == \"__main__\":\n    async def main():\n        print(\"Trinitas v3.5 MCP Tools - Practical Examples\")\n        print(\"=\" * 60)\n        \n        examples = TrinitasExamples()\n        \n        # List available examples\n        print(\"\\nAvailable Examples:\")\n        all_examples = examples.list_all_examples()\n        for category, example_list in all_examples.items():\n            print(f\"\\n{category.upper()}:\")\n            for example in example_list:\n                desc = examples.get_example_description(example)\n                print(f\"  - {example}: {desc}\")\n        \n        # Run a few key examples\n        key_examples = [\n            \"simple_persona_execution\",\n            \"quality_check_example\", \n            \"multi_persona_collaboration\",\n            \"workflow_execution_example\"\n        ]\n        \n        print(\"\\n\" + \"=\" * 60)\n        print(\"Running Key Examples:\")\n        \n        for example_name in key_examples:\n            try:\n                result = await examples.run_example(example_name)\n                print(f\"\\n✓ {example_name} completed successfully\")\n            except Exception as e:\n                print(f\"\\n✗ {example_name} failed: {str(e)}\")\n        \n        print(\"\\n\" + \"=\" * 60)\n        print(\"Examples completed. See above for detailed output.\")\n    \n    asyncio.run(main())