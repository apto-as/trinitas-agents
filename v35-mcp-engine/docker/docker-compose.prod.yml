version: '3.8'

services:
  # Central Orchestrator with HA
  mcp-orchestrator:
    build:
      context: ./mcp-orchestrator
      dockerfile: Dockerfile
    image: trinitas/mcp-orchestrator:v3.5
    container_name: trinitas-orchestrator
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    ports:
      - "8000:8000"
    environment:
      - ENV=production
      - LOG_LEVEL=info
      - REDIS_URL=${REDIS_URL}
      - CLAUDE_MCP_URL=${CLAUDE_MCP_URL}
      - LOCAL_MCP_URL=${LOCAL_MCP_URL}
      - METRICS_ENABLED=true
      - CACHE_TTL=3600
    env_file:
      - .env.prod
    volumes:
      - ./shared:/app/shared:ro
      - orchestrator-logs:/app/logs
    networks:
      - trinitas-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Claude MCP Server with load balancing
  claude-mcp:
    build:
      context: ./claude-mcp
      dockerfile: Dockerfile
    image: trinitas/claude-mcp:v3.5
    container_name: trinitas-claude-mcp
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    ports:
      - "8001-8003:8001"
    environment:
      - ENV=production
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - MAX_CONCURRENT_REQUESTS=10
      - REQUEST_TIMEOUT=60
      - RATE_LIMIT=100
    env_file:
      - .env.prod
    volumes:
      - ./personas/claude:/app/personas:ro
      - ./shared:/app/shared:ro
      - claude-logs:/app/logs
    networks:
      - trinitas-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Local LLM MCP Server with GPU support
  local-mcp:
    build:
      context: ./local-mcp
      dockerfile: Dockerfile
    image: trinitas/local-mcp:v3.5
    container_name: trinitas-local-mcp
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    ports:
      - "8002-8003:8002"
    environment:
      - ENV=production
      - LOCAL_LLM_ENDPOINT=${LOCAL_LLM_ENDPOINT}
      - MODEL_NAME=qwen-coder-32b
      - MAX_TOKENS=32768
      - ENABLE_GPU=true
      - CUDA_VISIBLE_DEVICES=0
    env_file:
      - .env.prod
    volumes:
      - ./personas/local:/app/personas:ro
      - ./shared:/app/shared:ro
      - local-logs:/app/logs
      - model-cache:/app/models
    networks:
      - trinitas-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis with persistence and replication
  redis:
    image: redis:7-alpine
    container_name: trinitas-redis
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - trinitas-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: trinitas-prometheus
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - trinitas-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trinitas-grafana
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - trinitas-network
    depends_on:
      - prometheus

  # Nginx load balancer
  nginx:
    image: nginx:alpine
    container_name: trinitas-nginx
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - trinitas-network
    depends_on:
      - mcp-orchestrator
      - claude-mcp
      - local-mcp

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: trinitas-loki
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - trinitas-network
    command: -config.file=/etc/loki/local-config.yaml

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: trinitas-promtail
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
    volumes:
      - ./config/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - orchestrator-logs:/var/log/orchestrator:ro
      - claude-logs:/var/log/claude:ro
      - local-logs:/var/log/local:ro
      - nginx-logs:/var/log/nginx:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - trinitas-network
    command: -config.file=/etc/promtail/config.yml

networks:
  trinitas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  orchestrator-logs:
    driver: local
  claude-logs:
    driver: local
  local-logs:
    driver: local
  nginx-logs:
    driver: local
  model-cache:
    driver: local